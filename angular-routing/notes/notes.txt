### Angular Routing

for issues check http://blogs.msmvps.com/deborahk/angular-routing-problem-solver/

Topics:
- Routing Basics
- Routing to features
- Route Parameters
- Prefetching Data using Route Resolvers
- Child routes
- Grouping and Component-less routes
- styling, animating and watching routes
- Secondary (auxillary) routes
- Route Guards
- Lazy Loading

## Sample app architecture

key
=p> primary routes
=c> child routes
=s> secondary routes

Main => app =p> Welcome
            =p> Login
            =p> Product List =p> Product Detail =p> Product Edit =c> Edit Info
                                                                 =c> Edit Tags
                             =p> Product Edit =c> Edit Info
                                              =c> Edit Tags
            =p> Product Edit =c> Edit Info
                             =c> Edit Tags
            =s> Message

Angular Modules

BrowserModule
RouterModule
HttpModule
    ^
App Module  ===  Product Module  ===  User Module ===  Message module  ===  Shared Module
    ^                   ^                 ^                 ^
 App Comp         Product List         Login Comp     Message Component
 Welcome C        Product Detail
Page n/found      Product Edit

## How

- Url is changed
- router checks paths for first match
- process redirect if exists
- process route guards
- resolve data
- activate component(s)
- Display template(s)

## Routing Basics

a base href if required in the index.html of the application.

RouterModule comes with two methods.

RouterModule.forRoot() & .forChild()

forRoot()

delcares router directives
manages route configuration
registers the router service
used once.

declares directives,
manages route config.
does not register service.
Used in feature modules.

redirects are local and only happen once.

routerLink directive needs to be added to template to activate routes.

Browser url styles.

HTML5 style and hash based object.

web apis allow access to history urls to control text in address.
Can prevent browser reload.

# based leverages url fragements and prevents a reload.

HMTML5 is a It's a more

{useHash: true} in router config activates hash-style urls.

checklist:
Setting up
- base path
- add router module and use .forRoot() in app module.
- use forChild for feature routes.

configuring routes
- path: url segment for route
- no leading slash
- empty for default
- ** fro wildcard
- normally include a component.
- component must be imported.

Order MAtters!

router-outlet directive tells you where to place component.

routerLink directive is an attribute for a clicable element.
- enclose in square brackets.
- bind to a link paramters array, first element id the root url segment.

## Routing to Features

An angular feature module is an angular module created with the express
purpose of organising the components for a specific application 
feature area.

Setting up feature routing
- import router
- configure routes
- activate routes

naming strategies
- using common route path names expresses a relationship between features.

Module routes are imported above those imported directly. 

## Routing with Code

Uses the Router Service in @angular/router

define dependency in constructor.

then you can define method to handle routing with code.

When a string syntax is used [] brackets can be left off.

navigateByUrl() method clears any additional routes. (entire set is replaced)
navigate() retains the secondary route information.

## Route Parameters

placeholders must first be defined.

router parameters need to be unique.

array for route can be build up with separate entries.

the ActivatedRoute service provides a component with access to route paramters.

You can either use a snapshot method with a property matching the required name,
or you can use an observable so that the template updates when required.

When a url only changes parameters, components aren't reinitialised, so any routes,
that only alter parameters, don't rerender fully and so it is recommended to use
observables to control fetching data within the init method.

In ng v4 route parameters can be accessed with .snapshot.paramMap.get() or getAll for multiple parameters.

e.g. 

import { ActivatedRoute } from '@angular/route';

import 

optional paramters are useful for additional routing information without affecting routing 
configuration. optional paramters are separated by semi-colons after the main route.

query parameters can be retained across route paths. They are not part of the routing config.
query params are passed separately to the route. they use the [queryParams] directive.
In code we add an object as a second argument to the navigate method which specifies 
named queryParams with the object.

To retain query params across components and rerender we can utilise the [preserveQueryParams] directive
and set its value to "true".

[preserveQueryParams] was deprecated in v2 and replaced in v4+ with [queryParamsHandling]="preserve"

## Prefetching Data using Route Resolvers

We can retrieve data before routing to a component. (If we think a person is likely to navigate there).

Route's have a Data Property that we can pass to a route.

A route resolver can fetch data first before naviagating to a route.

Angular services can also be used to share data.

Route's have a data property that 

Three steps:
- Build a route resolver
- add resolve property to the route configuration
- read the data from ActivatedRoute

Use snapshot if data won't change within same page,
Use observable if data can change within same page (i.e. no component rerender)

To create a Resolver we must implement the Resolve interface from the @angular/route.Resolve module.

route.data is used for obserables rather than route.snapshot which returns data.

## Child Routes

Child routes provide an easy way to organise your applications components in a logical way.

Child routes allow you to display routed templates into other routed templates. e.g. templates.

Allow for:
- tabbed pages,
- master / detail pages
- embed templates
- encapsulate features
- required for lazy loading.

child routes are defined within the children property of the parents route.

To load data for a child route you can use a product data service or a child route resolver, or where data is Shared
across tabs you can use a route resolver in the parent.

When using a link from parent to child we want to use
the ViewChild (from @ng/core) decorator.

Child paths only extend the parent route.

Access data using the activated routes snapshot or the activated routes data observable.

## Grouping and Component-less Routes

Grouping allows for better organisation
allows for sharing of guards and Resolvers.
and also allows for lazy loading.

Grouping Routes:
- make routes children of initial product route.
- remove component and embed in child with default '' route.

## Styling, Animating, and Watching routes

You can style an active route using the routerLinkActive directive the router will
add the named class when active and remove it when inactive.

The [routerLinkActiveOptions] directive allows you to specify additional parameters
such as whether a path matches exactly.

You can also use the [ngClass] directive which evaluates an expression given to it.

Animations can be done in two ways,

You can use CSS or Angular animation.

CSS is easy although not truly animating your routes.

Angular is more complex, need to conigure and then apply to each component.

Watching Routing events
- NavigationStart 
- RoutesRecognised
- NaviagationEnd
- NavigationCancel
- NavigationError

To watch routing events we need to enableTracing in the RouterModule.

Reacting to Routing Events

We can display animations, display logs or other.

We can subscribe to an events observable on the router object.

## Secondary Routes

To define a secondary set of routes we need to add additional router-outlet.

We can use it to suypoprt dashboards, multi-window interface,
notes, comments, and or messages.

All secondary outlets must have a defined unique name.

To activate secondary outlets we must define the route in a different way.
They must be configured with an outlet property naming the outlet (deinfed in "name").

e.g. [routerLink]="[{ outlets: { popup: ['messages'] } }]">

They are configured similarly to primary.

You can activate a secondary route in code using the following syntax:

// this identifies multiple routes at once.
this.router.navigate([{ outlets: {
    primary: [ '/products', product.id, 'edit' ],
    popup: [ 'summary', product.id ]
}}])

To clear secondary outlet we can use a routerLink directive or we can use code.
We set the outlet to null.

or navigateByUrl() and leave secodary outlet off.

## Route Guards

There are several guards

Guard processing done in following order:
canDeactivate - guard navigation away from a route
canLoad - prevent asynchronous routing
canActivateChild - guard navigation to a child route
canActivate - guard navigation to route
resolve - prefetch data before activating a route

Limit access to route, warn before leaving a route.
Retrieve data before accessing a route.

A route guard is normally built as a service. It can be a function.

We need to implement the target guard type interface.

It needs to be registered with at the angular module level.

We must add it to the route object in the router module definition and then add
the service to the appropriate propery e.g. "canActivate"

You can add a guard to child routes or a parent route (which would then guard all
children too)

canActivate:
- Checks criteria before activating a route
Commonly used to:
    - Limit route to specific users.
    - Ensure prerequisites are met.
Called when the Url cchanges to the route.

To share data we can use route parameters / etc

prefetched data can be used for validation as it's resolved last.

Best to use a service to hold a service as it's a singleton and will retain 
data during a login

canActivateChild
- checks criteria before activating child route.
- limits access to child routes,
- ensures prerequisites are met.
Called when Url changes to the child route.

difference between canActivate is that canActivate won't be
called again if you stay within the same route area, whereas
canActivateChild will be.

canDeactivate
- checks before leaving route.
- checks for unsaved changes.
- confirm leaving operation.
- only works within the application.

checklist:
build a service
implement guard type
create method
register service provider
add to route


## Lazy loading.

Requirements:
- Lazy loaded module must be a feature module.
- must be grouped under a single parent.
- can't be imported in another module.

we use the loadChildren property within the routing definition on the upper level component routing module.

canLoad() works before loading an asynchronous route.

better for security reasons as source code isn't loaded until authorised and necessary.

PreLoading (eager lazy loading) feature modules:
    - preloads approved modules so after initial load.

Three pre-loading strategies:
- No preloading (default)
- preload all (canLoad blocks preloading, with canActivate etc modules are preloaded, but not usable until guard conditions are met.)
- custom (we define it)

To define a strategy we pass a 'preLoadingStrategy' to the RouterModule as a second argument.

Custom strategies:
We define a preloading service using the PreloadingStrategy interface (preload(route: <Route>, load: <Function>): Observable<any> ).

We then must add service to provider in app-routing module, and then define this service as the value of the preLoadingStrategy
property in the router module configuration options argument.