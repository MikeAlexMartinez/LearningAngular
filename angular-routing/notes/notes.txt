### Angular Routing

for issues check http://blogs.msmvps.com/deborahk/angular-routing-problem-solver/

Topics:
- Routing Basics
- Routing to features
- Route Parameters
- Prefetching Data using Route Resolvers
- Child routes
- Grouping and Component-less routes
- styling, animating and watching routes
- Secondary (auxillary) routes
- Route Guards
- Lazy Loading

## Sample app architecture

key
=p> primary routes
=c> child routes
=s> secondary routes

Main => app =p> Welcome
            =p> Login
            =p> Product List =p> Product Detail =p> Product Edit =c> Edit Info
                                                                 =c> Edit Tags
                             =p> Product Edit =c> Edit Info
                                              =c> Edit Tags
            =p> Product Edit =c> Edit Info
                             =c> Edit Tags
            =s> Message

Angular Modules

BrowserModule
RouterModule
HttpModule
    ^
App Module  ===  Product Module  ===  User Module ===  Message module  ===  Shared Module
    ^                   ^                 ^                 ^
 App Comp         Product List         Login Comp     Message Component
 Welcome C        Product Detail
Page n/found      Product Edit

## How

- Url is changed
- router checks paths for first match
- process redirect if exists
- process route guards
- resolve data
- activate component(s)
- Display template(s)

## Routing Basics

a base href if required in the index.html of the application.

RouterModule comes with two methods.

RouterModule.forRoot() & .forChild()

forRoot()

delcares router directives
manages route configuration
registers the router service
used once.

declares directives,
manages route config.
does not register service.
Used in feature modules.

redirects are local and only happen once.

routerLink directive needs to be added to template to activate routes.

Browser url styles.

HTML5 style and hash based object.

web apis allow access to history urls to control text in address.
Can prevent browser reload.

# based leverages url fragements and prevents a reload.

HMTML5 is a It's a more

{useHash: true} in router config activates hash-style urls.

checklist:
Setting up
- base path
- add router module and use .forRoot() in app module.
- use forChild for feature routes.

configuring routes
- path: url segment for route
- no leading slash
- empty for default
- ** fro wildcard
- normally include a component.
- component must be imported.

Order MAtters!

router-outlet directive tells you where to place component.

routerLink directive is an attribute for a clicable element.
- enclose in square brackets.
- bind to a link paramters array, first element id the root url segment.

## Routing to Features

An angular feature module is an angular module created with the express
purpose of organising the components for a specific application 
feature area.

Setting up feature routing
- import router
- configure routes
- activate routes

naming strategies
- using common route path names expresses a relationship between features.

Module routes are imported above those imported directly. 

## Routing with Code

Uses the Router Service in @angular/router

define dependency in constructor.

then you can define method to handle routing with code.

When a string syntax is used [] brackets can be left off.

navigateByUrl() method clears any additional routes. (entire set is replaced)
navigate() retains the secondary route information.

## Route Parameters

placeholders must first be defined.

router parameters need to be unique.

array for route can be build up with separate entries.

the ActivatedRoute service provides a component with access to route paramters.

You can either use a snapshot method with a property matching the required name,
or you can use an observable so that the template updates when required.

When a url only changes parameters, components aren't reinitialised, so any routes,
that only alter parameters, don't rerender fully and so it is recommended to use
observables to control fetching data within the init method.

In ng v4 route parameters can be accessed with .snapshot.paramMap.get() or getAll for multiple parameters.

e.g. 

import { ActivatedRoute } from '@angular/route';

import 

optional paramters are useful for additional routing information without affecting routing 
configuration. optional paramters are separated by semi-colons after the main route.

query parameters can be retained across route paths. They are not part of the routing config.
query params are passed separately to the route. they use the [queryParams] directive.
In code we add an object as a second argument to the navigate method which specifies 
named queryParams with the object.

To retain query params across components and rerender we can utilise the [preserveQueryParams] directive
and set its value to "true".

[preserveQueryParams] was deprecated in v2 and replaced in v4+ with [queryParamsHandling]="preserve"

## Prefetching Data using Route Resolvers

We can retrieve data before routing to a component. (If we think a person is likely to navigate there).

Route's have a Data Property that we can pass to a route.

A route resolver can fetch data first before naviagating to a route.

Angular services can also be used to share data.

Route's have a data property that 

Three steps:
- Build a route resolver
- add resolve property to the route configuration
- read the data from ActivatedRoute

Use snapshot if data won't change within same page,
Use observable if data can change within same page (i.e. no component rerender)

To create a Resolver we must implement the Resolve interface from the @angular/route.Resolve module.

route.data is used for obserables rather than route.snapshot which returns data.

## Child Routes

Child routes provide an easy way to organise your applications components in a logical way.

Child routes allow you to display routed templates into other routed templates. e.g. templates.

Allow for:
- tabbed pages,
- master / detail pages
- embed templates
- encapsulate features
- required for lazy loading.

child routes are defined within teh children property of the parents route.

To load data for a child route you can use a product data service or a child route resolver, or where data is Shared
across tabs you can use a route resolver in the parent.

When using a link frmo parent to child we want to use
the ViewChild (from @ng/core) decorator.