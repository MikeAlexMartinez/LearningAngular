===================
# Ngrx in Angular #
===================

Ngrx applies the 'flux' / 'redux' like state management pattern in order to make
state management more logical and simple to manage.

Presentational components should be as 'dumb' and as simple as possible.
presentational components should be concerned with rendering the UI and not with 
containing the complex business logic.

Allows you to inject a single thing into the components of the application.

Allows you to implement OnPush change detection.

Components display state, and can dispatch actions to change state
in the store.

Reducers listen for actions that are dispatched and carry them out.

You shouldn't perform effects (impure usually async actions that cause side-effects, e.g. server
communications) within a reducer, these should be handled elsewhere. Effects would communicate
with a http service.

when effects are used, you would strip out the prior reducer and would the reducer would capture
actions dispatched by the effects function and then the state will be updated after a successful
server-side communications actions.


=====================================================================
# Notes from https://gist.github.com/btroncone/a6e4347326749f938510 #
=====================================================================

Overview

Application built aroun three main pieces:
  - Reducers
  - Actions
  - A Single Application Store

Store : A client side single source of truth.
  It can supply a complete representation of relevant application state.
  In Angular 2 Plus it also offers performance benefits.

Reducer: A pure function accepting two arguments, the current state, and
  action with a type and an optional payload. A reducer slices the current
  state and then transforms it using the action and optional payload to create
  a new state object.

Actions: actions communicate to reducers when state needs to change.

Action Pipeline:
  Dispatch => Reducer => New State => Store

Proejcting Data:
  We can treat the objects in the store as observables which means yu can use all the
  RxJS based observable operators. Which allows you to view slices of data as necessary.

Advantages:
  Centralized, Immutable State.
  Performance
  Testability
  Tooling and Ecosystem

Building Blocks of @ngrx/store
  Subject / Dispatcher (see examples/store-dispatcher.ts)
    These both extend RxJS Subjects. They are both Observables and 
    Observers meaning you can subscribe to a subject, and a subject
    can subscribe to a store. They can be thought of as messengers or
    proxies.

  BehaviorSubject (see examples/behaviorsubject.ts)
    One issue with the Rx.Subject object is that when converted to a 
    Dispatcher it will only send values to subscribers once they have
    subscribed to the store. RxJS offers a BehaviorSubject which offers
    everything that a Subject offers except it also emits the last
    emitted value upon subscription meaning observers have a access
    to the latest up to date information.

Store And Dispatcher Data Flow
  In order for store to function appropriately the actions dispatched need
  to be passed through a pipeline.
  The pipeline is as follows:
    Dispatched Action
    Pre-Middleware
    Reducers (return new State)
    Post-Middleware
    store.next(newState)
  calling store.dispatch is equivalent to calling dispatcher.dispatch.

Reducers: (see store-redux-style.js for example of reducers)
  Reducers take a iterable list of actions and perform the actions
  iteratively, each time amending the state of the object passed in.
  In the context of a store, each time an action is called, all the 
  reducers of the store will either perform an action to change the 
  state of the app in some way or will return their current state 
  unchanged.

Aggregating state with scan. (see scan.js)
  The 'scan' observable operator is similar to reduce except it 
  accumulates value over time (asynchronously).

Although this was removed in v2 it used to be possible to take
the whole observable with the 'let' operator and then you could
amend the operator as necessary.

## Slicing state with map

map provides a specified function to each item, returning a new 
representation of that item.

## managing updates with distinctUntilChanged

the distinctUntilChanged operator will only emit a new value when the next 
value is different to the previously emitted value. As reducers only return 
the previous value if no change has been made, this means your application
only receives updates if the value has changed, making the store more 
efficient.


####################################
==                                ==
==  Creating an NgRX application  ==
==                                ==
####################################

Steps:

Define Constants (to name actions):
  Define what actions can be performed to change the state of the application.

Create Reducers:
  That can change state of store in an immutable way.

Utilizing Container components
  
  Smart or Container Components
    Smart, or Container components should be your root level, routable 
    components. These components have direct access to the store or a 
    derivative. Smart components handle view events and the dispatching of 
    actions. Whether through the service or directly.

  Dumb, or Child components
    Dumb, or child components are for presentation only relying on @input
    parameters, acting on received data in an appropriate manner. When 
    relevant event occur in dumb components they are emitted up to be handled 
    by a parent/smart component.

Utilizing the Async Pipe
  the 'async' pipe is a unique stateful pipe for handling async objects. The 
  pipe handles both subscribing and unsubscribing to the supplied observable.

Taking advantage of ChangeDetection.OnPush
  when components rely solely on inputs, and those input references do not 
  change, Angular can skip running change detection on that section of the
  component tree. Delegating of state should be handled in smart, top level
  components.

Expanding state
  Most applications will be made up of multiple reducers each managing their
  own slice of state.

Slicing state for views
  The store should be thought of as your client-side database. The store 
  provides a helper function 'select' which utilises 'map' and 
  'distinctUntilChanged' behind the scenes to return an observable of
  the appropriate slice of state.

Projecting State for View with 'combineLatest' and 'withLatestFrom'
  combineLatest and withLatestFrom allow for an observer
  to easily subscribe to and react to changes in multiple
  Observables, with the latest values from each slice being
  sent over when any of the susbcribed to items change.

Extracting Selectors for Reuse
  We can utilise the pipe operator and the 'selector' pattern
  to make reusable functions that can easily, extract and
  subscribe to changes withing the store.