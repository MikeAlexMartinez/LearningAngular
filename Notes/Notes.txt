Why Angular?

More Expressive,

Powerful Data Binding

Modularity By Design

Built in Back End Integration

New Angular is Faster, Modern, Simplified API, Enhances Productivity.


## Anatomy of an Angular Application

Application = Component + Component + Component
              -------------Services------------

Component = Template + class - properties, methods + metadata + CSS

Root => Angular Module => Component - Component - Component
     <= Feature Angular Module

Sample App Architecture

Welcome Component AppComponent
Product List Component => Star Component AppComponent index.html
Product Detail Component => ^

Product Data Service

Can use ES5, ES2015

Typescript => Strong Typing, Great IDE Tooling.

typescript, superset of Javascript.
- Uses Typescript type definition files.
- Uses Class-based object-orientation.

Setting up an Angular Application:
- Create an Application folder
- Add package definition and configuration files
- install the packages
- Create app's Angular Module
- Create the main.ts file
- Create the host Web Page (index.html)

Download results of these steps
- Using quickstart
- Use Angular CLI

Modules
- Provides ability to prevent namespace clashing.
- ES 2015 created spec for moduilarity.

Components
- class - exported for use elsewhere.
        - will have properties (type defined with Typescript)
        - and methods
        - uses camelcase.
        - may extend other classes or implement a specified interface.
- metadata - uses ES6 decorator syntax to mixin information.
        - includes various properties: selector, template, styling, providers, etc...
        - prefixed with @
        - Angular has a range of built in decorators e.g. Component.
        - templates use {{ double bracket binding }}

Angular Applications are defined withing the NgModule Decorator with a root App component.

Component Checklists
Class -> Code
Decorator -> metadata
import waht we need

Clear name
  - Use PascalCasing
  - Append Component to name

export keyword

Data in properties
  - Appropriate data type
  - Appropriate default value
  - camelCase with first letter lowercase

Logic in methods
 - camelcase for method names

Metadata
  @Component decorator
  selctor, prefix for clarity.
  template for HTML
  import allows finding of members component needs.

If it's not working:
  - F12
  - HTML , close tags, angular directives.
  - Typescript, close braces
  - use blog - http://blog.msmvps.com/deborahk/angular-2-getting-started-problem-solver/
  - post to forum

Templates, Interpolation and Directives

Templates can either be inline with quotes,
multi-line strings with back-ticks, or with a html document
used with a 'templateUrl' property.

Interpolation within an angular component involves using 
{{ double-brackets }} within the template.

## Directives

Template directives - what we use alot of.
Structural Directive - e.g. *ngIf, *ngFor

## Data Binding & Pipes

Property binding allows us to use [] brackets to use
a property in an element attribute.

Event Binding uses () curly brackets to identify when to respond.

Two way binding uses [()] to bind two ways. You need to ensure
you add the FormsModule to allow ngModel to be available.

Pipes use the | character to 'pipe' data through a specfic formatting
instruction.

You can use the pipe name with parameters separated by a colon :

## More on Components

you can use the Angular CLI to create templates for components.

Strong typing and interfaces allow better checking and Tooling

Encapsulation of styles. (in properties).

Lifecycle hooks allow for key 'life' events of the component
to be used to make the page more responsive.

## Custom Pipes =>

Use @Pipe decorator where we define the name of the pipe.

Then define a class which implements the PipeTransform interface.

This means we need to implement the transform with the first argument is the first parameter, 
other parameters follow.

We also need to add the pipe to the App component.

Angular doesn't offer filtering pipes because they perform poorly and prevent
aggressive minification.

Recommend filtering and sorting logic into the component itself.

## Nested Components.

Interfaces - A specification identifying a related set of 
properties and methods.

A class commits to suporting the specification by implementing 
the interface. 

Interfaces are for development time only.

Component Lifecycle =>
  Create = Render = Create and render children = Process Changes = Destroy

OnInit = Lifecycle hook to perform component initialization
and retrieve data.

OnChanges = Perform action after change to input properties

OnDestroy = clean up anything before component is destroyed.

## Building Nested Components

For our purposes, nest-able means manages fragment of larger view,
has a selector, communicates with it's container.

Nested Components can communicate using the @Input and @Output decorators, and events (EventEmitter).
The events can pass data back up the component tree.


## Services and Dependency Injection

A Service is a class with a focused purpose.

Used for features that:
- Are independent from any particular component.
- Provide shared data or logic across components.
- Encapsulate external interactions.

Need to Build service, register service and then you can use it.

Register service with Angular (a singleton) and then you can inject it into the component when needed.

When using services we should use the @Injectable decorator.

We want to add the service to the class using the class contructor. We can use the short 
syntax to make it easier. To retrieve data we should use life cycle hooks.

## Retrieving Data Using HTTP

Observables and Reactive Extensions.

Help manages asynchronous data, treat events as a collections.
An array whose items arrive asynchronously over time. 

Angular uses RxJS.

Methods on Observables that compose new Observables. observables process each value as it arrives.

Different to Promises:
Promise:
  - single future value
  - not lazy
  - Not cancellable

Observable:
 - Emits multiple calues over time
 - Lazy
 - Cancellable

Http Checklist: Setup
- Add HttpClientModule to the imports array of the application's Angular Modules.
- Build a service - define Dependency on  httpclient in constructor.

- create method for each http request.

use generics to specify returned type, with erro handling.

In components use subscribe method of Observable.

## Navigation and Routing Basics.

We configure a route for each component.

Deinfe options/Applications

Tie a route to eahch option/action

Activate view based on user action.

Angular includes a RouterModule to configure app routes.

Routes require a path and component. Router uses a first match first priority. Therefore order matters.